---
import {
  db,
  eq,
  Blog,
  BlogsToCountries,
  BlogsToLanguages,
  Country,
  Language,
} from 'astro:db';

import { groupBy, uniqueBy } from '../lib/collection';
import { joinList } from '../lib/intl';

export type Props = { collegeId: string };

const { collegeId } = Astro.props;

const rows = await db
  .select()
  .from(Blog)
  .where(eq(Blog.collegeId, collegeId))
  .innerJoin(BlogsToCountries, eq(BlogsToCountries.blogId, Blog.id))
  .innerJoin(Country, eq(BlogsToCountries.countryId, Country.code))
  .innerJoin(BlogsToLanguages, eq(BlogsToLanguages.blogId, Blog.id))
  .innerJoin(Language, eq(BlogsToLanguages.languageId, Language.code));

const groupedRows = groupBy(rows, (row) => row.Blog.id!);

const blogs = Object.values(groupedRows).map((group) => {
  const blog = group[0]?.Blog;
  const countries = uniqueBy(group, (row) => row.Country.code!).map(
    (row) => row.Country.name,
  );
  const languages = uniqueBy(group, (row) => row.Language.code!).map(
    (row) => row.Language.name,
  );
  return { ...blog, countries, languages };
});

const blogsByYear = Object.entries(
  groupBy(blogs, (blog) => blog.year as number),
).sort(
  ([aYear], [bYear]) =>
    (bYear as unknown as number) - (aYear as unknown as number),
);
---

<ul>
  {
    blogsByYear.map(([year, blogs]) => (
      <li>
        <h3 class="year">{year}</h3>
        <ul>
          {blogs.map((blog) => (
            <li class="blog">
              {/* prettier-ignore */}
              <a href={blog.url} target="_blank" class="first-name">{blog.firstName}</a>{' '}
              {joinList(blog.countries)}
              {' â€“ '}
              {joinList(blog.languages)}
            </li>
          ))}
        </ul>
      </li>
    ))
  }
</ul>

<style>
  ul {
    list-style-type: none;
    padding: 0;
  }

  .year {
    font-size: var(--font-size-l);
    font-weight: var(--font-weight-regular);
    line-height: var(--line-height-m);
    margin-top: var(--spacing-m);
    margin-bottom: var(--spacing-xxs);
  }

  .blog {
    line-height: var(--line-height-l);
  }

  .first-name {
    color: var(--color-primary);
    font-weight: var(--font-weight-bold);
    text-underline-offset: 0.25em;
    text-decoration-color: var(--color-border);
  }

  .first-name:hover,
  .first-name:focus {
    text-decoration-color: var(--color-primary);
    text-decoration-thickness: 0.125em;
  }
</style>
